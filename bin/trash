#!/usr/bin/env python3

import argparse
import os
import sys
import re

from datetime import datetime

TRASH_DIR = os.path.expanduser(os.environ.get("TRASH_DIR", "~/.trash"))
TRASH_INDEX = os.path.join(TRASH_DIR, ".trash.index")

parser = argparse.ArgumentParser()
sub_parsers = parser.add_subparsers(title="subcommands")

add_parser = sub_parsers.add_parser("add", help="add trash to $TRASH_DIR")

add_parser.add_argument("files", metavar="FILES", nargs="+",
	help="the names of the files to be added to the trash directory.")

add_parser.add_argument("-v", "--verbose", action="store_true",
	help="print out additional information")

restore_parser = sub_parsers.add_parser("restore",
	help="restore trash from $TRASH_DIR")

restore_parser.add_argument("targets", metavar="TARGETS", nargs="+",
	help="the names of the files to be restored.")

restore_parser.add_argument("-v", "--verbose", action="store_true",
	help="print out additional information")

list_parser = sub_parsers.add_parser("list",
	help="list files inside the trash directory.")

list_parser.add_argument("-s", "--short", action="store_true",
	help="list files using short format.")

list_parser.add_argument("-a", "--alphabetic", action="store_true",
	help="sort files alphabetically according to their names.")

empty_parser = sub_parsers.add_parser("empty",
	help="permanantly delete all files inside the trash directory.")

empty_parser.add_argument("-f", "--force", action="store_true",
	help="empty out trash directory without confirmation.")

def get_human_readable_size(size, digits=1):
	readable_sizes = ["B", "KB", "MB", "GB", "TB", "PB"]
	index = 0
	fraction_digits = 0

	while size >= 1024 and index < len(readable_sizes)-1:
		size, fraction_digits = divmod(size, 1024)
		index += 1

	return round(float("%s.%s" % (size, fraction_digits)), digits), readable_sizes[index]

def _add(args):
	dir = os.path.expanduser(os.path.dirname(TRASH_INDEX))
	if not os.path.exists(dir):
		os.makedirs(dir)

	with open(TRASH_INDEX, "a") as index:
		for entry in args.files:
			if not os.path.exists(entry):
				print("'%s' does not exist" % entry)
				continue

			entry = os.path.realpath(os.path.expanduser(entry))
			alias = os.path.split(entry)[-1]
			date = datetime.now()

			pattern = re.compile(r"%s(\.\d+)?$" % alias)

			similarly_named_files = list(filter(lambda x: pattern.match(x), os.listdir(TRASH_DIR)))

			if len(similarly_named_files) > 0:
				alias += ".%s" % (len(similarly_named_files)+1)

			os.rename(entry, os.path.join(TRASH_DIR, alias))
			index.write("%s:%s:%s\n" % (alias, entry, date.strftime("%d.%m.%y.%H.%M.%S")))

			if args.verbose:
				print("trashed %r" % os.path.split(entry)[-1])

def _restore(args):
	removed = []
	entries = []

	with open(TRASH_INDEX, "r") as index:
		entries = index.readlines()

	for target in args.targets:
		for entry in entries:
			alias, path, time = entry.split(":")

			parent_directory = os.path.dirname(path)

			if not os.path.exists(parent_directory):
				os.makedirs(parent_directory)

			if target == alias:
				os.rename(os.path.join(TRASH_DIR, alias), path)
				removed.append(entry)

				if args.verbose:
					print("restored %r to %r" % (os.path.split(path)[-1], path))

	with open(TRASH_INDEX, "w") as index:
		for entry in entries:
			if entry not in removed:
				index.write(entry)

def _list(args):
	if not os.path.exists(TRASH_INDEX):
		print("No files in trash directory.")
		quit()

	if not args.short:
		print("\033[38;5;220;1mINDEXED TRASH:\033[0m\n")

	with open(TRASH_INDEX, "r") as index:
		entries = index.readlines()

		for entry in entries:
			alias, path, time = entry.strip().split(":")

			time = datetime.strptime(time, "%d.%m.%y.%H.%M.%S")
			trash_target_path = os.path.join(TRASH_DIR, alias)

			readable_size = ""

			if not os.path.isdir(trash_target_path):
				try:
					size = os.path.getsize(trash_target_path)
				except:
					size = 0

				readable_size = get_human_readable_size(size)
				readable_size = " ".join(map(str, readable_size))
			else:
				alias += "\033[0m/"

			print("\033[38;5;105m%s\033[0m" % alias, end="")
			print(" (\033[38;5;111m%s\033[0m)" % time.strftime("%d %b %Y %H:%M:%S"), end="")

			if args.short:
				if not os.path.isdir(trash_target_path):
					print(" (\033[38;5;95m%s\033[0m)" % readable_size, end="")
			else:
				print("\npath:", path)

				if not os.path.isdir(trash_target_path):
					print("size:", "\033[38;5;95m%s\033[0m" % readable_size)
			print()

def _empty(args):
	open(TRASH_INDEX, "w").close()

add_parser.set_defaults(func=_add)
restore_parser.set_defaults(func=_restore)

list_parser.set_defaults(func=_list)
empty_parser.set_defaults(func=_empty)

if __name__ == "__main__":
	if len(sys.argv) == 1:
		parser.print_help()

	args = parser.parse_args()
	if hasattr(args, "func"):
		args.func(args)
