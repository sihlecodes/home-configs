#!/usr/bin/env python3

import argparse
import os
import shutil
import sys
import re

from datetime import datetime

TRASH_DIR = os.path.expanduser(os.environ.get("TRASH_DIR", "~/.trash"))
TRASH_INDEX = os.path.join(TRASH_DIR, ".trash.index")

parser = argparse.ArgumentParser()
sub_parsers = parser.add_subparsers(title="subcommands")

add_parser = sub_parsers.add_parser("add", help="add trash to $TRASH_DIR")

add_parser.add_argument("files", metavar="FILES", nargs="+",
    help="the names of the files to be added to the trash directory.")

add_parser.add_argument("-V", "--no-verbose", action="store_true",
    help="print out additional information")

restore_parser = sub_parsers.add_parser("restore",
    help="restore trash from $TRASH_DIR")

restore_parser.add_argument("targets", metavar="TARGETS", nargs="+",
    help="the names of the files to be restored.")

restore_parser.add_argument("-V", "--no-verbose", action="store_true",
    help="print out additional information")

list_parser = sub_parsers.add_parser("list",
    help="list files inside the trash directory.")

list_parser.add_argument("-s", "--short", action="store_true",
    help="list files using short format.")

list_parser.add_argument("-a", "--alphabetic", action="store_true",
    help="sort files alphabetically according to their names.")

list_parser.add_argument("pattern", nargs="?",
    help="filter files using a fuzzy pattern")

empty_parser = sub_parsers.add_parser("empty",
    help="permanantly delete all files inside the trash directory.")

empty_parser.add_argument("-f", "--force", action="store_true",
    help="empty out trash directory without confirmation.")

colour_map = {
    "alias": 105,
    "time": 111,
    "size": 95,
    "header": 220,
}

def style(input: str, **attributes) -> str:
    options: list = ["\033["]

    if attributes.get("bold", False):
        options.append("1")

    colour: str = attributes.get("colour", "")

    if colour:
        colour_code: int = colour_map.get(colour, 160)
        options.append(f"38;5;{colour_code}")

    return ";".join(options) + "m" + input + "\033[0m"

def get_human_readable_size(size, digits=1):
    readable_sizes = ["B", "KB", "MB", "GB", "TB", "PB"]
    index = 0
    fraction_digits = 0

    while size >= 1024 and index < len(readable_sizes) - 1:
        size, fraction_digits = divmod(size, 1024)
        index += 1

    human_readable_size = round(float(f"{size}.{fraction_digits}"), digits)
    return (human_readable_size, readable_sizes[index])

def fuzzy_find(pattern: str, entries: list[str], break_char: str = "") -> list[str]:
    pattern = pattern[::-1].lower()
    matches: set = set()

    for entry in entries:
        distance: int = 0
        stretch: int = 0  # sort priority
        index: int = len(pattern) - 1
        pattern_char: str = pattern[index]

        for entry_char in entry.lower():
            if break_char and entry_char == break_char:
                break

            if entry_char == pattern_char:
                stretch += distance

                if index == 0:
                    matches.add((entry, stretch))
                    break

                distance = 0
                index -= 1
                pattern_char = pattern[index]

            distance += 1

    by_best_match = sorted(matches, key=lambda x: x[1])
    return list(map(lambda x: x[0], by_best_match))

def add_entry(entry: str):
    with open(TRASH_INDEX, "a") as index:
        index.write(entry + "\n")

def get_entries() -> list:
    entries: list
    with open(TRASH_INDEX, "r") as index:
        entries = index.readlines()

    return entries

def parse_entry(entry: str):
    m = re.match(r"(?P<alias>.+):(?P<path>/.+):(?P<timestamp>(\d\d\.){5}\d\d)", entry)

    if m is None:
        raise ValueError(f"ERROR parsing entry: {entry}")

    return m.group("alias"), m.group("path"), m.group("timestamp")

def make_entry(*args):
    return ":".join(args)

def restore_entry(entry: str) -> bool:
    alias, path, _ = parse_entry(entry)

    try:
        permissions = 511
        ignore_exceptions = True

        os.makedirs(os.path.dirname(path),
                    permissions, ignore_exceptions)

        os.rename(os.path.join(TRASH_DIR, alias), path)

        if not args.no_verbose:
            print(f"restored '{alias}' to '{path}'")

    except OSError as e:
        print(f"failed to restore file due to exception: {e}")
        return False

    return True

def register_removed_entries(removed: list):
    entries = get_entries()

    with open(TRASH_INDEX, "w") as index:
        for entry in entries:
            if entry not in removed:
                index.write(entry)

def get_file_size(filename: str):
    try:
        size = os.path.getsize(filename)
    except OSError:
        size = 0

    readable_size = get_human_readable_size(size)
    readable_size = " ".join(map(str, readable_size))

    return readable_size

def _add(args):
    dir = os.path.expanduser(os.path.dirname(TRASH_INDEX))
    if not os.path.exists(dir):
        os.makedirs(dir)

    for file in args.files:
        if not os.path.exists(file):
            print("%r does not exist" % file)
            continue

        file = os.path.realpath(os.path.expanduser(file))
        alias = os.path.basename(file)
        timestamp = datetime.now().strftime("%d.%m.%y.%H.%M.%S")

        pattern = re.compile(fr"{alias}(\.\d+)?$")
        duplicates = list(filter(pattern.match, os.listdir(TRASH_DIR)))

        destination_alias = alias

        if len(duplicates) > 0:
            destination_alias += f".{len(duplicates) + 1}"

        try:
            if os.path.isfile(file):
                destination_path = os.path.join(TRASH_DIR, destination_alias)
                os.rename(file, destination_path)

            elif os.path.isdir(file):
                shutil.move(file, TRASH_DIR) 

            add_entry(make_entry(destination_alias, file, timestamp))

            if not args.no_verbose:
                print(f"trashed '{alias}'")

        except OSError:
            prompt = f"Unable to trash '{alias}', would you like to delete it instead? (Y/n) "
            response: str = input(prompt)

            if re.match(r"y|ye|yes", response.lower()):
                if os.path.isfile(file):
                    os.remove(file)
                elif os.path.isdir(file):
                    shutil.rmtree(file, True)

                if not args.no_verbose:
                    print(f"deleted '{alias}'")

            elif not args.no_verbose:
                print("Operation aborted")

# TODO: handle ghost entries (indexed none existant files)
def _restore(args):
    removed = []

    for pattern in args.targets:
        matched_entries: list = fuzzy_find(pattern, get_entries(), ":")
        match_count: int = len(matched_entries)

        if match_count == 1:
            matched = matched_entries[0]
            if restore_entry(matched):
                removed.append(matched)

        elif match_count == 0:
            target_path = os.path.join(TRASH_DIR, pattern)

            if os.path.exists(target_path):
                print(f"'{pattern}' is unindexed however it exists in the $TRASH_DIR")
                response = input(f"Would you like to restore it to the current directory? (Y/n) ")

                if re.match(r"y|ye|yes", response.lower()):
                    destination_path = os.path.join(os.curdir, pattern)
                    restore_entry(make_entry(pattern, destination_path, ""))
            else:
                print(f"'{pattern}' was not found.")

        elif match_count > 1:
            print(f"There are multiple entries that match the pattern '{pattern}'")

            for i, entry in enumerate(matched_entries):
                alias, path, time = parse_entry(entry)
                time = datetime.strptime(time, "%d.%m.%y.%H.%M.%S")

                print(f"{i+1: 2}.",
                    style(time.strftime("%d %b %Y %H:%M:%S"), colour="time"),
                    style(alias, colour="alias"), f"{style(path, colour='')}")

            selection: int = 0
            try:
                selection = int(input("\nSelect an option: ")) - 1

                if selection < 0 or selection >= match_count:
                    print("Invalid selection")
                    continue

            except ValueError:
                print("Incorrect input format. A number was expected.")

            selected: str = matched_entries[selection]

            if restore_entry(selected):
                removed.append(selected)

    register_removed_entries(removed)

# TODO: list unindexed trash
# TODO: unindex files that don't exist anymore
def _list(args):
    if not os.path.exists(TRASH_INDEX):
        print("No files in trash directory.")
        quit()

    if not args.short:
        print(f"{style('INDEXED TRASH:', colour='header', bold=True)}\n")

    with open(TRASH_INDEX, "r") as index:
        entries = index.readlines()

        if args.pattern:
            entries = fuzzy_find(args.pattern, entries, ":")

        for entry in entries:
            alias, path, time = parse_entry(entry)

            time = datetime.strptime(time, "%d.%m.%y.%H.%M.%S")
            trash_target_path = os.path.join(TRASH_DIR, alias)

            readable_size = ""

            if not os.path.isdir(trash_target_path):
                readable_size = get_file_size(trash_target_path)
            else:
                alias += "\033[0m/"

            formatted_time = time.strftime('%d %b %Y %H:%M:%S')

            print(style(alias, colour="alias"), end=" ")
            print("(", style(formatted_time, colour="time"), sep="", end=")")

            if args.short:
                if not os.path.isdir(trash_target_path):
                    print(" (", style(readable_size, colour="size"), sep="", end=")")
            else:
                print("\npath:", path)

                if not os.path.isdir(trash_target_path):
                    print("size:", style(readable_size, colour="size"))
            print()

def _empty(_):
    open(TRASH_INDEX, "w").close()

add_parser.set_defaults(func=_add)
restore_parser.set_defaults(func=_restore)

list_parser.set_defaults(func=_list)
empty_parser.set_defaults(func=_empty)

if __name__ == "__main__":
    if len(sys.argv) == 1:
        parser.print_help()

    args = parser.parse_args()

    if hasattr(args, "func"):
        args.func(args)
